// working solution of advent 2019, day 18
const { log } = console
const DIRS = [[-1,0], [0,1], [1,0], [0,-1]]
const isKey = c => (c >= 'a' && c <= 'z')
const isDoor = c => (c >= 'A' && c <= 'Z')

// find out maze origin and num of keys
const mazeStats = (maze) => {
  let startPos = [0, 0], numKeys = 0
  for (let i = 0; i < maze.length; i++) {
    const row = maze[i]
    const j = row.indexOf('@')
    if (j >= 0) {
      startPos = [i, j]
    }
    numKeys += row.filter(isKey).length
  }
  return { startPos, numKeys }
}

// given maze, start position and num of keys
function World(_maze) {
  // create a char maze
  const maze = _maze.map(s => s.split(''))
  // set maze char
  const setMazeChar = ([i, j], c) => { maze[i][j] = c }	

  const { startPos, numKeys } = mazeStats(maze)
  const char = ([i, j]) => maze[i][j]
  const posKey = (pos) => pos.join(',')
  const dirs = ([i, j]) => {
    if (maze[i][j] != '.') return []
    return DIRS.map(([di, dj]) => [i+di, j+dj])
    .filter(([i, j]) => maze[i][j] != '#')
  }
  
  // given a source pos
  // find all possible destinations
  const findDests = (srcPos) => {
    const queue = [[srcPos, 0]]
    const marked = {}
    const dests = {} 
    
    const mark = pos => { marked[posKey(pos)] = true }
    const isMarked = pos => marked[posKey(pos)] || false
    const hit = pos => char(pos) != '.' 
    
    while (queue.length) {
      const [pos, k] = queue.shift()
      mark(pos)
      if (hit(pos)) {
        dests[char(pos)] = { pos, k }
      }
      
      dirs(pos).forEach(nextPos => {
        if (!isMarked(nextPos)) {
          queue.push([nextPos, k+1])
        }
      })
    }
    
    return dests
  }
  
  const hasDoorKey = (keys, door) => 
    keys.indexOf(door.toLowerCase()) >= 0
  const genMemoKey = (objs, pos) => 
    [...objs].sort().join('') + ':' + pos.join(',')
  
  // given keys/doors taken, source pos
  //  find min total steps
  const visit = (objsTaken, srcPos) => {
    const numObjs = objsTaken.length
    let res = Infinity
    setMazeChar(srcPos, '.')
    const keys = objsTaken.filter(isKey)
    const memoKey = genMemoKey(keys, srcPos)
    
    if (memo[memoKey] != undefined) {
//    console.log('hit', memoKey)
      res = memo[memoKey]
    } else {
      if (keys.length == numKeys) {
        log('>', objsTaken.join(''))
        res = 0
      } else {
        const dests = findDests(srcPos)
        //		console.log(srcPos, dests)
        const nextObjs = Object.keys(dests)
        .filter(c => isKey(c) || hasDoorKey(keys, c))
        nextObjs.forEach(o => {
          const { pos, k } = dests[o]
          const nextSteps = visit([...objsTaken, o], pos)
          if (nextSteps != Infinity) {
            res = Math.min(res, nextSteps + k)
          }
        })
      }
      memo[memoKey] = res
    }
    
    setMazeChar(srcPos, objsTaken[numObjs - 1])
    return res
  }
  
  const memo = {}
  const minSteps = visit(['@'], startPos)
  console.log(minSteps)
  //console.log(memo)
  return minSteps
}

//World([
//"#########",
//"#b.A.@.a#",
//"#########",
//])  // 8

//World([
//"########################",
//"#f.D.E.e.C.b.A.@.a.B.c.#",
//"######################.#",
//"#d.....................#",
//"########################"
//])  // 86

//World([
//"########################",
//"#...............b.C.D.f#",
//"#.######################",
//"#.....@.a.B.c.d.A.e.F.g#",
//"########################"
//])  // 132

//World([
//"#################",
//"#i.G..c...e..H.p#",
//"########.########",
//"#j.A..b...f..D.o#",
//"########@########",
//"#k.E..a...g..B.n#",
//"########.########",
//"#l.F..d...h..C.m#",
//"#################",
//])  // 136

//World([
//"########################",
//"#@..............ac.GI.b#",
//"###d#e#f################",
//"###A#B#C################",
//"###g#h#i################",
//"########################"
//])  // 81

//World([
//"#################################################################################",
//"#.....#.....#z#...C.....#.........#.....#.#.....#.......V.#.....#.........#b....#",
//"###.#.###.#.#.#.#####.###.#.#######.###.#.#.#.#.#.#######.#####.#.#######.#.#.###",
//"#...#..y..#.#.#.#...#.#...#........p#...#...#.#...#.....#.#...T.#...#...#...#...#",
//"#.#.#######.#.#.#.###.#.#############.#.#####.#####.#####.#.#.###.###.#.#.#####H#",
//"#.#.#.....#.#.#.#...#...#..l....#.....#.#...Y.#...#.......#.#.#...#...#.#.....#.#",
//"#.#.#.###.#.#.#.###.#####.###.###.#####.#.#####.###.#######.###.###.###.#######.#",
//"#.#.#.G.#.#...#...#.........#...#.#.....#.#...#...#.#.#.........#...#.#...#.....#",
//"#.#####.#.#######.#############.#.#####.#.#.###.#.#.#.#.#####.###.###.###.#.###.#",
//"#.....#.#.......#.........#.....#.....#.#.#.#...#...#...#...#...#.#.......#...#.#",
//"#.#.#.#.#######.#########.#.###.#####.###.#.#.###########.#.###.#.###.#######.#.#",
//"#.#.#.#.#.....#.....#...#...#.#.#...#...#.#...............#...#.#...#.........#.#",
//"###.###.###.#.###.###.#.#####.#.#.#####.#.###################.#####.###########.#",
//"#...#...#...#.#...#...#...#...#...#.....#...#...#...........#.....#.#..g..#...#.#",
//"#A###.###.###.#.#.#.###.###.#.###.#.###.###Z#.#.#.#########.#####.#.#.###.#.#.#.#",
//"#...#...#.#...#.#.#.#.#.....#.....#.#.#.#.#...#..n#.......#.....#i..#...#...#.#.#",
//"#.#.###.#.#.###.###.#.#############.#.#.#.#########.#.#########N#######.#####.#.#",
//"#.#...#...#...#.#.......#...........#.#.#.#.X.....#.#.#.......#....o#.#.#...#.#.#",
//"#.###.#######.#.#.#######.###########.#.#.#.###.###.#.#.#####.#####.#.#.###.#.#.#",
//"#v#.#.#.....#.#...#.....#.......#.#.....#.#...#..u..#.#.#e....O...#.#.#.#...#...#",
//"#.#.#.#.###.#.#####.###.#.#####.#.#.#####.###.#######.#.###.#####.#.#.#W#.#.#####",
//"#...#.#...#.#.#.#...#...#.....#.#.#.#...#.........#...#...#.#.#.#.#.#.#...#.#...#",
//"#####.#.###.#.#.#.#######.#####.#.#.###.#.#########.#####.###.#.#.#.#.#####.#.###",
//"#.....#.#...#...#.#.......#.....#.#.....#.....#...#.#.....#...#.....#.....#.#...#",
//"#.#####.#.#####.#.###.#####.#####.#####.#####.#.#.#.#.###.#D#########.#####.###.#",
//"#.I.#...#.....#.#...#...#...#.......#...#.K.#.#.#...#q..#.#.#......d#.....#...#.#",
//"#.#.#.#####.#.#.###.#####.###.###.###.#####.#.#.#######.#E#.#.#####.###.#.###.#.#",
//"#.#.#.#...#.#...#...#...#...#...#.....#.#...#.#.......#.#.#...#...#.R.#.#...#.#.#",
//"#.#.#.#.#.#######.###.#.###.###.#######.#.###.#####.###.#######.#####.#.#.###.#.#",
//"#.#...#.#.........#...#.....#.....#...#.#...#.#...#...#.....#r..#.....#.#.#...#.#",
//"#######.###########.#############.#.#.#.###.#.#.#.###.###.#.#.#.#.#####.#.#.###.#",
//"#w..#...#.........#.....#.....#...#.#...#...#.#.#.....#.#.#.#.#.#.#...#.#...#...#",
//"#.#.#.###.#######.###.#.#.###.#.###.###.#.###.#.#####.#.#.###Q#.#.###.#.#####.#.#",
//"#.#.#.....#.....#...#.#.....#.#.....#.#.#...#.#...#.....#.....#...#...#.......#.#",
//"#.#.#######.###.###.#.#######.#######.#.#.#.#.###.#####.###########.#.#########.#",
//"#.#.#.......#.#...#.#.#.....#...#.....#.#.#.#...#...#.....J.........#...#...#...#",
//"#.#.#.#######.#.###.###.###.###.#.###.#.#.#.###.###.###############.#####.#.#.###",
//"#.#...#...#...#.....#...#.#.....#.#.#...#.#.....#.#.......#...#...#.#...#.#.#.#.#",
//"#.#####.#.#.#.#######.###.#######.#.#####.#######.#######.#.#.#.#.###.#.#.#.#.#.#",
//"#.......#...#.........#.................................#...#...#.....#...#.....#",
//"#######################################.@.#######################################",
//"#.....#.......#.#.........#...#...#...#...........#.........#...................#",
//"#.###.#.#####.#.#.#####.#.#.#.#.#.#.#.#.#.#.#######.#######.#.#####.#######.###.#",
//"#...#...#...#...#.#...#.#...#...#...#...#.#.#...#...#...#.#...#...#.#.....#.#...#",
//"#.#.###.#.#.#####.#.#.#.#####.#########.#.#.#.#.#.###.#.#.#####.#.#.#.#####.#.###",
//"#.#...#.#.#.......#.#.#.#.....#.......#.#.#.#.#...#...#...#...#.#.#...#...#.#.#.#",
//"#.###.###.###########.#.#.#####.#####.###.#.#.#####.#######.#.#.#.#####.#.#.#.#.#",
//"#...#...#.#.......#...#.#.#.#...#...#...#.#...#.....#.......#...#...#...#.#.#.#.#",
//"###.###.#.#####.#.#.###.#.#.#.###.#.#.#.#.#####.#####.#############.#.###.#.#.#.#",
//"#.#.#.#.........#.#...#.#...#.#...#.#.#.#.#.........#.....#.......#...#.#...#..m#",
//"#.#.#.###########.###.#.###.#.#.###.###.#.###.#####.#####.#.#####.#####.###.#####",
//"#...#.#.....#...#.#...#.#...#.#.#.#...#.#k..#.#.......#...#.#...#...#.......#...#",
//"#.###.#.###.#.###.#.###.#.###.#.#.###.#.###.#.#.#####.#.###.#.#.###.###.#####.#.#",
//"#...#j#.#.#.#.#...#.#...#.#...#.#.#...#.#...#.#.#.....#.......#...#...#.#...S.#.#",
//"###.#.#.#.#.#.#.###.#.#####.###.#.#.###.#.#####.#.#############.#####.###.#####.#",
//"#.#...#.#.#.#.......#.......#...#.#.#...#.......#.#...#...#.....#.....#...#...#.#",
//"#.###.#.#.#.#######.#########.###.#.#.#.###.#######.#.#.#.###.###.#.###.#####.#.#",
//"#.....#...#...#.M.........#...#.....#.#.#...#.......#...#...#...#.#.#...#.....#.#",
//"#.#######.###.#.#####.#####.###.#####.#.#.###.#############.#####.###.###.#####.#",
//"#...#.#...#.#.#.#...#.#...#.#.........#.#.#.#.....#.......#....a#...#.#...#...#.#",
//"###.#.#.###.#.###.#.###.#.#.###########.#.#.#####.#.#####.#####.#.#.#.#.###.#.#.#",
//"#.#...#....t#.....#.#.#.#.#...........#.#...#...#.#.....#...#...#.#...#.#...#...#",
//"#.###.#####.#######.#.#.#.#.#########.#.###.###.#.#.###.#########.#####.#.#####.#",
//"#.#...#...#.#...#.#...#.#.#...#.....#.#.#.#...#.#.#...#...#.....#...#...#.#...#.#",
//"#.#.###.#.#.#.#.#.#####.#.###.#.#####.#.#.###.#.#.###.###.#.#.#####.###.#.#.#.#.#",
//"#...#.#.#...#.#.....#...#.#...#.#.....#.#...#.#.#...#...#.#.#.#.........#.#.#.#.#",
//"#.###.#.#####.#####.###.#.#.###.#.#####.#.#.#.#.###.###.#.#.#.#.#########.#.###.#",
//"#.....#.#.........#.....#.#.....#...#...#.#.#x#...#.#...#...#...#.........#..f#.#",
//"#####.#.#####.###.#######.#####.###.#.#####.#.#.#.#.#####.#######.#########.#.#.#",
//"#.#...#.#...#.#...#...#...#.....#.#.#...#...#.#.#.#.#...#...L...#.#.......#.#...#",
//"#.#.###.#.#.###.###.#.#.###.#####.#.#####.###.###.#.#B#.#########.###.###.#.#####",
//"#.#.P.#...#.....#.#.#.#...#.......#.....#...#.....#...#.........#...#...#.....#.#",
//"#.###.###########.#.#.###.#############.###.#####.#############.###.#.#######.#.#",
//"#c....#...#.#.......#...#.#.......#...#.#.....#...#...#.....#.#.#...#.#...#.....#",
//"#.#####.#.#.#.#######.###.#.#####.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#####.#.#####.#",
//"#...#..s#.#.F.....#...#...#.#...#.#.#...#.#.#...#...#...#.#.#.#.#.......#.....#.#",
//"###.###.#.#######.#.#.#.###.#.###.#.###.#.###.###########.#.#.#.#####.#######.###",
//"#...#...#.#...#...#.#.#...#.#...#...#.#.#.....#.......#...#...#.#...#.#.....#...#",
//"#.###.###.#.#.#####.#.###.#.#.#.#####.#.#.#######.###.#.#####.#.#.#.###.###.###.#",
//"#.....#.....#.......#...#...#.#.........#.....U...#.....#.....#...#....h#.......#",
//"#################################################################################",	
//])