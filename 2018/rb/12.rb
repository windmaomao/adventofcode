fn = open("2018/input/12")
input = fn.each_line.map(&:chomp)
raw = input.shift(2)[0][15..].freeze
rules = input.map{|l| 
  l.split(" => ")
}.freeze

def findIndex(str, target)
  sz = target.size
  (0..str.size-sz).select { |i| str[i,sz] == target }
end

# Part 1
chars = ['.', '#']
str = "..." + raw.dup + "................................................"
neg = -3
i = 0
while i < 150
  sum = str.chars.map.with_index{|c, i| 
    c == '#' ? i + neg : 0
  }.inject(&:+)
  p "#{str}, #{i}, #{sum}"
  modifies = [[], []]
  rules.each{ |pattern, char| 
    charIndex = char == '#' ? 1 : 0 
    modifies[charIndex] += findIndex(str, pattern).map{|i| i+2}
  }
  # p modifies.map{ |m| m.sort }
  str2 = "." * str.size
  modifies.each_with_index{ |m, j|
    m.each{ |k| str2[k] = chars[j] }
  }
  first = str.index('#')
  if first>6
    str = str2[first-4...-1] + "....."
    neg += first - 4
  else
    str = str2
  end
  str = str[0...160]

  i += 1
end
sum = str.chars.map.with_index{|c, i| 
  c == '#' ? i + neg : 0
}.inject(&:+)
p "#{str}, #{i}, #{sum}"

# Part 2
# The population is moving horizontally to the right after some time
# Therefore the increment is fixed and we just need to wait a warmup time
count = str.chars.count{ |c| c == '#' }
n = 50000000000
p (n - i) * count + sum

# ".....#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#............, 102, 6397"
# "......#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#..........., 103, 6448"  51
# ".......#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#.........., 104, 6499"  51
# ".....#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#............, 105, 6550‚Äù  51
# "......#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#..........., 106, 6601"
# ".......#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#.........., 107, 6652"
# ".....#.#..#.#..#.#..#.#..#.#..#.#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#..#.#..#..#..#..#..#..#..#.#..#..#............, 108, 6703"